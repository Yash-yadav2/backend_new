#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require("fs");
var app = require("../app");
var debug = require("debug")("user-auth-api:server");
var https = require("https");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Load SSL Certificates
 */
const options = {
 key: fs.readFileSync('/etc/letsencrypt/live/xn--casiom820-jy5d.com/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/xn--casiom820-jy5d.com/fullchain.pem')
};

/**
 * Create HTTPS server.
 */
var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 * /**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val; // Named pipe
  if (port >= 0) return port;  // Port number
  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;
  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  
  /**
   * Event listener for HTTPS server "listening" event.
   */
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
    console.log("âœ… Secure HTTPS Server running on " + bind);
  }